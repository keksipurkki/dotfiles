" vim: nowrap fdm=marker
"
" File:         vimrc
" Last Change:  2019-10-12

execute "set packpath+=" . expand('<sfile>:h')
syntax on
filetype plugin indent on

" Settings {{{1

" Note: No settings related to linewidth/shiftwidth. They are defined in .editorconfig

let mapleader = ";"
let maplocalleader = ";"

set shellcmdflag+=l " Read ~/.profile
set completeopt=longest,menuone
set guicursor+=a:blinkon0
set guifont=Monego:h14 " Monaco with bold/italic font weights
set hidden
set autoread
set directory=/tmp
set guioptions-=T
set ignorecase
set incsearch
set modeline
set nobackup
set nowritebackup
set number
set scrolloff=8
set cmdheight=1
set updatetime=300
set background=light
set laststatus=2
set shortmess+=c
set signcolumn=yes
set smartcase
set et
set t_Co=256
set vb t_vb=

" Jump to the line that was last edited
function! LastLine()
  if line("'\"") > 1 && line("'\"") <= line("$") |
    exe "normal! g`\"" |
  endif
endfunction

" Turn off syntax highlighting if the file under edit is over 1 MB
function! SyntaxEscapeHatch()
  if getfsize(expand("%")) > 1024 * 1024 | syntax off | endif
endfunction

" Sanitize indent settings globally
function! IndentReset()
  set autoindent
  set smartindent
  set nocindent
endfunction

autocmd BufReadPre * silent call SyntaxEscapeHatch()
autocmd BufReadPost * silent call LastLine()
autocmd BufReadPost * silent call IndentReset()
autocmd VimLeave * macaction terminate:

" Git
command! GitRoot :execute 'lcd' systemlist('git rev-parse --show-toplevel')[0]
command! -nargs=* GitLoadEm :args `set -f ; printf \"\%s\\n\" \"$(git grep --cached -Il '' )\"`

" Mappings {{{1
noremap + "+
noremap TT :tabe<CR>
noremap Y y$
noremap D d$
noremap <C-L> :redraw!<CR>

" For debbuging syntax highlighting
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Common typos
cabbrev <expr> E ((getcmdtype() == ':' && getcmdpos() <= 2)? 'e' : 'E')
cabbrev <expr> W ((getcmdtype() == ':' && getcmdpos() <= 2)? 'w' : 'W')
cabbrev <expr> Q ((getcmdtype() == ':' && getcmdpos() <= 2)? 'q' : 'Q')
cabbrev res Res

command! -range=% CRLFify :e ++ff=dos
command! DosToUnix :e ++ff=dos | :setlocal ff=unix | :w
command! Vimrc :e $MYVIMRC
command! TakeMeHere :lcd %:p:h
command! -range=% ValidateJSON <line1>,<line2>:!python -mjson.tool
command! -range=% ValidateXML <line1>,<line2>:!tidy -qi -xml
command! -range=% StripSpaces <line1>,<line2>:s/\s\+$//g|w
command! -range=% Indent <line1>,<line2>:!indent

" Prettier
function! CSVFormat()
  %substitute/\t/;/g
  %substitute/,/./g
  %substitute///g
  global/^\s*$/d
endfunction

command! -range=% PrettierHtml <line1>,<line2>:!tidy -qi -utf8 || true
command! -range=% PrettierSwift <line1>,<line2>:!swift format
command! -range=% PrettierCSV :call CSVFormat()

" Filetypes {{{1
autocmd BufRead,BufNewFile *.cwiki setlocal ft=confluencewiki
autocmd FileType markdown setlocal spell
autocmd FileType txt setlocal spell

let g:is_bash=1

let g:tex_flavor = 'latex'
let g:tex_comment_nospell= 1
let g:tex_nine_config = {
      \'compiler' : 'latex',
      \'viewer': {'app': 'open', 'target': 'pdf'},
      \}

let netrw_browsex_viewer = "open"

let g:javascript_plugin_flow = 0
let g:vim_jsx_pretty_highlight_close_tag = 0

" Vimdiff
if &diff
  noremap <buffer> <C-F> ]c
  noremap <buffer> <C-B> [c
  noremap <buffer> dp zRdp
  noremap <buffer> do zRdo
endif

" Spell checking
noremap <D-s> ]s
noremap <D-A-s> [s

"Colors {{{1
function! ColorFixes()

  " Patch MacVim color scheme
  hi Conceal guifg=#000000   guibg=#ffffff  gui=none ctermfg=16 ctermbg=231 cterm=none
  hi LineNr guibg=white guifg=darkgrey
  hi SignColumn guibg=white

  " Simplify the color scheme
  hi Comment guifg=#cccccc gui=bold

endfunction
autocmd BufReadPost * silent call ColorFixes()

if !has('gui_running')
  colorscheme terminal
endif

" Misc {{{1
let g:airline_powerline_fonts = 0

au BufNewFile,BufRead *.ts setlocal filetype=typescript
au BufNewFile,BufRead *.tsx setlocal filetype=typescript.tsx
